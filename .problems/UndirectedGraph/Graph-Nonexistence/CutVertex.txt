/////////////////////////////////////////
////////// Self-writing
/////////////////////////////////////////

// Determine whether a vertex is a cut vertex or not
boolean cutVertex(int v) {
    // helper visited array created locally so calls are independent
    boolean[] visited = new boolean[numberOfVertices];

    // count components in original graph
    int a = 0;
    for (int i = 0; i < numberOfVertices; i++) {
        if (!visited[i]) {
            dfs(i, visited, -1); // -1 => no vertex excluded
            a++;
        }
    }

    // count components in graph with v removed (skip v)
    boolean[] visited2 = new boolean[numberOfVertices];
    visited2[v] = true; // mark v as "removed"
    int b = 0;
    for (int i = 0; i < numberOfVertices; i++) {
        if (!visited2[i]) {
            dfs(i, visited2, v); // dfs will skip v
            b++;
        }
    }

    if (b > a) {
        System.out.print(v + " ");
        resultCutVertex += "," + v;
        return true;
    }
    return false;
}

void dfs(int u, boolean[] visited, int excluded) {
    if (u == excluded) {
        return;
    }
    visited[u] = true;
    for (int j = 0; j < numberOfVertices; j++) {
        if (j == excluded) {
            continue;
        }
        if (!visited[j] && graph[u][j] != 0) {
            dfs(j, visited, excluded);
        }
    }
}

/////////////////////////////////////////
